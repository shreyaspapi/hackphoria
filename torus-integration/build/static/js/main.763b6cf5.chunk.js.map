{"version":3,"sources":["helper.js","App.js","index.js"],"names":["web3Obj","web3","Web3","torus","setweb3","provider","web3Inst","initialize","buildEnv","a","Torus","init","network","host","login","sessionStorage","setItem","tokenAbi","require","App","state","account","balance","selectedVerifier","placeholder","verifierId","setStateInfo","eth","getAccounts","then","accounts","setState","getBalance","enableTorus","e","preventDefault","console","error","changeProvider","setProvider","getUserInfo","userInfo","logout","cleanUp","signMessage","currentProvider","send","method","params","from","err","result","signTypedData_v1","type","name","value","signTypedData_v3","JSON","stringify","types","EIP712Domain","Person","Mail","primaryType","domain","version","chainId","verifyingContract","message","wallet","to","contents","text","document","querySelector","innerHTML","signTypedData_v4","Group","wallets","sendEth","sendTransaction","utils","toWei","sendDai","finally","instance","Contract","Math","floor","parseFloat","toString","methods","transfer","hash","createPaymentTx","initiateTopup","selectedCurrency","fiatValue","selectedCryptoCurrency","catch","getPublicAddress","verifier","onSelectedVerifierChanged","event","target","isTorus","getItem","this","className","onSubmit","onChange","onClick","style","marginTop","defaultValue","marginLeft","disabled","id","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.763b6cf5.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport Torus from '@toruslabs/torus-embed'\n\nconst web3Obj = {\n  web3: new Web3(),\n  torus: {},\n  setweb3: function(provider) {\n    const web3Inst = new Web3(provider)\n    web3Obj.web3 = web3Inst\n  },\n  initialize: async function(buildEnv) {\n    const torus = new Torus()\n    await torus.init({ buildEnv: buildEnv || 'production', network: { host: 'rinkeby' } })\n    await torus.login()\n    web3Obj.setweb3(torus.provider)\n    web3Obj.torus = torus\n    sessionStorage.setItem('pageUsingTorus', buildEnv)\n  }\n}\nexport default web3Obj\n","import React from 'react'\nimport web3Obj from './helper'\n\nconst tokenAbi = require('human-standard-token-abi')\n\nclass App extends React.Component {\n  state = {\n    account: null,\n    balance: '',\n    selectedVerifier: 'google',\n    placeholder: 'Enter google email',\n    verifierId: null,\n    buildEnv: 'testing'\n  }\n\n  componentDidMount() {\n    const isTorus = sessionStorage.getItem('pageUsingTorus')\n    if (isTorus) {\n      web3Obj.initialize(isTorus).then(() => {\n        this.setStateInfo()\n      })\n    }\n  }\n\n  setStateInfo = () => {\n    web3Obj.web3.eth.getAccounts().then(accounts => {\n      this.setState({ account: accounts[0] })\n      web3Obj.web3.eth.getBalance(accounts[0]).then(balance => {\n        this.setState({ balance: balance })\n      })\n    })\n  }\n\n  enableTorus = async e => {\n    const { buildEnv } = this.state\n    e.preventDefault()\n    try {\n      await web3Obj.initialize(buildEnv)\n      this.setStateInfo()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  changeProvider = async () => {\n    await web3Obj.torus.setProvider({ host: 'ropsten' })\n    this.console('finished changing provider')\n  }\n\n  getUserInfo = async () => {\n    const userInfo = await web3Obj.torus.getUserInfo()\n    this.console(userInfo)\n  }\n\n  logout = () => {\n    web3Obj.torus.cleanUp().then(() => {\n      this.setState({ account: '', balance: 0 })\n      sessionStorage.setItem('pageUsingTorus', false)\n    })\n  }\n\n  signMessage = () => {\n    // hex message\n    const message = '0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad'\n    web3Obj.torus.web3.currentProvider.send(\n      {\n        method: 'eth_sign',\n        params: [this.state.account, message],\n        from: this.state.account\n      },\n      (err, result) => {\n        if (err) {\n          return console.error(err)\n        }\n        this.console('sign message => true \\n', result)\n      }\n    )\n  }\n\n  signTypedData_v1 = () => {\n    const typedData = [\n      {\n        type: 'string',\n        name: 'message',\n        value: 'Hi, Alice!'\n      },\n      {\n        type: 'uint8',\n        name: 'value',\n        value: 10\n      }\n    ]\n    web3Obj.torus.web3.currentProvider.send(\n      {\n        method: 'eth_signTypedData',\n        params: [typedData, this.state.account],\n        from: this.state.account\n      },\n      (err, result) => {\n        if (err) {\n          return console.error(err)\n        }\n        this.console('sign typed message v1 => true \\n', result)\n      }\n    )\n  }\n\n  signTypedData_v3 = () => {\n    const typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' }\n        ],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' }\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' }\n        ]\n      },\n      primaryType: 'Mail',\n      domain: {\n        name: 'Ether Mail',\n        version: '1',\n        chainId: 4,\n        verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'\n      },\n      message: {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826'\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'\n        },\n        contents: 'Hello, Bob!'\n      }\n    }\n    web3Obj.torus.web3.currentProvider.send(\n      {\n        method: 'eth_signTypedData_v3',\n        params: [this.state.account, JSON.stringify(typedData)],\n        from: this.state.account\n      },\n      (err, result) => {\n        if (err) {\n          return console.error(err)\n        }\n        this.console('sign typed message v3 => true \\n', result)\n      }\n    )\n  }\n\n  console = text => {\n    document.querySelector('#console>p').innerHTML = typeof text === 'object' ? JSON.stringify(text) : text\n  }\n\n  signTypedData_v4 = () => {\n    const typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' }\n        ],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallets', type: 'address[]' }\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person[]' },\n          { name: 'contents', type: 'string' }\n        ],\n        Group: [\n          { name: 'name', type: 'string' },\n          { name: 'members', type: 'Person[]' }\n        ]\n      },\n      domain: {\n        name: 'Ether Mail',\n        version: '1',\n        chainId: 4,\n        verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'\n      },\n      primaryType: 'Mail',\n      message: {\n        from: {\n          name: 'Cow',\n          wallets: ['0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826', '0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF']\n        },\n        to: [\n          {\n            name: 'Bob',\n            wallets: [\n              '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n              '0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57',\n              '0xB0B0b0b0b0b0B000000000000000000000000000'\n            ]\n          }\n        ],\n        contents: 'Hello, Bob!'\n      }\n    }\n    web3Obj.torus.web3.currentProvider.send(\n      {\n        method: 'eth_signTypedData_v4',\n        params: [this.state.account, JSON.stringify(typedData)],\n        from: this.state.account\n      },\n      (err, result) => {\n        if (err) {\n          return console.error(err)\n        }\n        this.console('sign typed message v4 => true \\n', result)\n      }\n    )\n  }\n\n  sendEth = () => {\n    const { account } = this.state\n    web3Obj.web3.eth.sendTransaction({ from: account, to: account, value: web3Obj.web3.utils.toWei('0.01') })\n  }\n\n  sendDai = () => {\n    web3Obj.torus.setProvider({ host: 'mainnet' }).finally(() => {\n      const localWeb3 = web3Obj.web3\n      const instance = new localWeb3.eth.Contract(tokenAbi, '0x6b175474e89094c44da98b954eedeac495271d0f')\n      const value = Math.floor(parseFloat(0.01) * 10 ** parseFloat(18)).toString()\n      instance.methods.transfer(this.state.account, value).send(\n        {\n          from: this.state.account\n        },\n        (err, hash) => {\n          if (err) this.console(err)\n          this.console(hash)\n        }\n      )\n    })\n  }\n\n  createPaymentTx = () => {\n    web3Obj.torus\n      .initiateTopup('wyre', {\n        selectedCurrency: 'USD',\n        fiatValue: '250',\n        selectedCryptoCurrency: 'ETH'\n      })\n      .catch(err => this.console(err.message))\n  }\n\n  getPublicAddress = () => {\n    web3Obj.torus.getPublicAddress({ verifier: this.state.selectedVerifier, verifierId: this.state.verifierId }).then(this.console)\n  }\n\n  onSelectedVerifierChanged = event => {\n    let placeholder = 'Enter google email'\n    switch (event.target.value) {\n      case 'google':\n        placeholder = 'Enter google email'\n        break\n      case 'reddit':\n        placeholder = 'Enter reddit username'\n        break\n      case 'discord':\n        placeholder = 'Enter discord ID'\n        break\n      default:\n        placeholder = 'Enter google email'\n        break\n    }\n    this.setState({\n      selectedVerifier: event.target.value,\n      placeholder\n    })\n  }\n\n  render() {\n    let { account, buildEnv, selectedVerifier, verifierId, placeholder, balance } = this.state\n    return (\n      <div className=\"App\">\n        {!account && (\n          <form onSubmit={this.enableTorus}>\n            <p>Build Environment</p>\n            <select name=\"buildEnv\" value={buildEnv} onChange={e => this.setState({ buildEnv: e.target.value })}>\n              <option value=\"production\">Production</option>\n              <option value=\"staging\">Staging</option>\n              <option value=\"testing\">Testing</option>\n              <option value=\"development\">Development</option>\n            </select>\n            <button>Login</button>\n          </form>\n        )}\n        {account && (\n          <div>\n            <div>Account: {account}</div>\n            <div>Balance: {balance}</div>\n            <button onClick={this.getUserInfo}>Get User Info</button>\n            <button onClick={this.createPaymentTx}>Create Payment Tx</button>\n            <button onClick={this.sendEth}>Send Eth</button>\n            <button onClick={this.logout}>Logout</button>\n            <br />\n            <button onClick={this.signMessage}>sign_eth</button>\n            <button onClick={this.signTypedData_v1}>sign typed data v1</button>\n            <button onClick={this.signTypedData_v3}>sign typed data v3</button>\n            <button onClick={this.signTypedData_v4}>sign typed data v4</button>\n            <button onClick={this.changeProvider}>Change Provider</button>\n            <button onClick={this.sendDai}>Send DAI</button>\n            <div style={{ marginTop: '20px' }}>\n              <select name=\"verifier\" onChange={this.onSelectedVerifierChanged} value={selectedVerifier}>\n                <option defaultValue value=\"google\">\n                  Google\n                </option>\n                <option value=\"reddit\">Reddit</option>\n                <option value=\"discord\">Discord</option>\n              </select>\n              <input\n                type=\"email\"\n                style={{ marginLeft: '20px' }}\n                onChange={e => this.setState({ verifierId: e.target.value })}\n                placeholder={placeholder}\n              />\n            </div>\n            <button disabled={!verifierId} style={{ marginTop: '20px' }} onClick={this.getPublicAddress}>\n              Get Public Address\n            </button>\n          </div>\n        )}\n        <div id=\"console\">\n          <p></p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}